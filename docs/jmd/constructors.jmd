# Model constructors

The `lmm` function creates a linear mixed-effects model representation from a `Formula` and an appropriate `data` type.
At present a `DataFrame` is required but that is expected to change.
```@docs
lmm
```

## Examples of linear mixed-effects model fits

For illustration, several data sets from the *lme4* package for *R* are made available in `.rda` format in this package.
These include the `Dyestuff` and `Dyestuff2` data sets.
```{julia;term=true}
using DataFrames, RData, MixedModels
const dat = convert(Dict{Symbol,DataFrame}, load(Pkg.dir("MixedModels", "test", "dat.rda")));
dump(dat[:Dyestuff])
```
The columns in these data sets have been renamed for convenience in comparing models between examples.
The response is always named `Y`.
Potential grouping factors for random-effects terms are named `G`, `H`, etc.

### Models with simple, scalar random effects

The formula language in *Julia* is similar to that in *R* except that the formula must be enclosed in a call to the `@formula` macro.
A basic model with simple, scalar random effects for the levels of `G` (the batch of an intermediate product, in this case) is declared and fit as
```{julia;term=true}
fm1 = fit!(lmm(@formula(Y ~ 1 + (1|G)), dat[:Dyestuff]))
```

(If you are new to Julia you may find that this first fit takes an unexpectedly long time, due to Just-In-Time (JIT) compilation of the code.
The second and subsequent calls to such functions are much faster.)

```{julia;term=true}
@time fit!(lmm(@formula(Y ~ 1 + (1|G)), dat[:Dyestuff2]))
```

### Simple, scalar random effects

A simple, scalar random effects term in a mixed-effects model formula is of the form `(1|G)`.
All random effects terms end with `|G` where `G` is the *grouping factor* for the random effect.
The name or, more generally, the expression `G` should evaluate to a categorical array that has a distinct set of *levels*.
The random effects are associated with the levels of the grouping factor.

A *scalar* random effect is, as the name implies, one scalar value for each level of the grouping factor.
A *simple, scalar* random effects term is of the form, `(1|G)`.
It corresponds to a shift in the intercept for each level of the grouping factor.

### Models with vector-valued random effects

The *sleepstudy* data are observations of reaction time, `Y`, on several subjects, `G`, after 0 to 9 days of sleep deprivation, `U`.
A model with random intercepts and random slopes for each subject, allowing for within-subject correlation of the slope and intercept, is fit as
```{julia;term=true}
fm2 = fit!(lmm(@formula(Y ~ 1 + U + (1+U|G)), dat[:sleepstudy]))
```

A model with uncorrelated random effects for the intercept and slope by subject is fit as
```{julia;term=true}
fm3 = fit!(lmm(@formula(Y ~ 1 + U + (1|G) + (0+U|G)), dat[:sleepstudy]))
```

Although technically there are two random-effects *terms* in the formula for *fm3* both have the same grouping factor
and, internally, are amalgamated into a single vector-valued term.

### Models with multiple, scalar random-effects terms

A model for the *Penicillin* data incorporates random effects for the plate, `G`, and for the sample, `H`.
As every sample is used on every plate these two factors are *crossed*.
```{julia;term=true}
fm4 = fit!(lmm(@formula(Y ~ 1 + (1|G) + (1|H)), dat[:Penicillin]))
```

In contrast the sample, `G`, grouping factor is *nested* within the batch, `H`, grouping factor in the *Pastes* data.
That is, each level of `G` occurs in conjunction with only one level of `H`.
```{julia;term=true}
fm5 = fit!(lmm(@formula(Y ~ 1 + (1|G) + (1|H)), dat[:Pastes]))
```

In observational studies it is common to encounter *partially crossed* grouping factors.
For example, the *InstEval* data are course evaluations by students, `G`, of instructors, `H`.
Additional covariates include the academic department, `H`, in which the course was given and `A`, whether or not it was a service course.
```{julia;term=true}
fm6 = fit!(lmm(@formula(Y ~ 1 + A * I + (1|G) + (1|H)), dat[:InstEval]))
```

## Fitting generalized linear mixed models

To create a GLMM using
```@docs
glmm
```
the distribution family for the response, given the random effects, must be specified.

```{julia;term=true}
gm1 = fit!(glmm(@formula(r2 ~ 1 + a + g + b + s + m + (1|id) + (1|item)), dat[:VerbAgg],
    Bernoulli()))
```

The canonical link, which is the `GLM.LogitLink` for the `Bernoulli` distribution, is used if no explicit link is specified.

In the [`GLM` package](https://github.com/JuliaStats/GLM.jl) the appropriate distribution for a 0/1 response is the `Bernoulli` distribution.
The `Binomial` distribution is only used when the response is the fraction of trials returning a positive, in which case the number of trials must be specified as the case weights.

# Extractor functions

`LinearMixedModel` and `GeneralizedLinearMixedModel` are subtypes of `StatsBase.RegressionModel`.
Many of the generic extractors defined in the `StatsBase` package have methods for these models.

### Model-fit statistics

The statistics describing the quality of the model fit include
```@docs
loglikelihood(::StatisticalModel)
aic
bic
```
```{julia;term=true}
loglikelihood(fm1)
aic(fm1)
bic(fm1)
loglikelihood(gm1)
```

The `deviance` generic is documented as returning negative twice the log-likelihood adjusting for the saturated model.
```@docs
deviance(::StatisticalModel)
```

It is not clear what the corresponding saturated model is for a `LinearMixedModel` so negative twice the log-likelihood is called the `objective`.
```@docs
objective
```
This value is also accessible as the `deviance` but the user should bear in mind that this doesn't have all the properties of a deviance which is corrected for the saturated model.  For example, it is not necessarily non-negative.
```{julia;term=true}
objective(fm1)
deviance(fm1)
```

The value optimized when fitting a `GeneralizedLinearMixedModel` is the Laplace approximation to the deviance.
```@docs
LaplaceDeviance
```
```{julia;term=true}
LaplaceDeviance(gm1)
```

### Parameter estimates

The `coef` and `fixef` extractors both return the estimates of the fixed-effects coefficients.
```@docs
coef
fixef
```
```{julia;term=true}
show(coef(fm1))
show(fixef(fm1))
show(fixef(gm1))
```

The covariance parameters estimates as shown in the model summary are obtained as a `VarCorr` object
```@docs
VarCorr
```
```{julia;term=true}
VarCorr(fm1)
VarCorr(gm1)
```


Other extractors are defined in the `MixedModels` package itself.
```@docs
fnames
getΛ
getθ
lowerbd
```

Applied to one of the models previously fit these yield
```{julia;term=true}
fixef(fm1)
coef(fm1)
coeftable(fm1)
getΛ(fm1)
getθ(fm1)
loglikelihood(fm1)
pwrss(fm1)
showall(ranef(fm1))
showall(ranef(fm1, uscale=true))
sdest(fm1)
std(fm1)
stderr(fm1)
varest(fm1)
vcov(fm1)
```
