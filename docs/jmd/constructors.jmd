# Model constructors

The `lmm` function creates a linear mixed-effects model representation from a formula/data representation.
```@docs
lmm
```

## Examples of linear mixed-effects model fits

For illustration, data sets from the *lme4* package for *R* are made available in `.rda` format in this package.
```{julia;term=true}
using DataFrames, RData, MixedModels
const dat = convert(Dict{Symbol,DataFrame}, load(Pkg.dir("MixedModels", "test", "dat.rda")));
dat[:Dyestuff]
```
These are the `Dyestuff` data from the *lme4* package.
The columns have been renamed for convenience in comparing models between examples.
The response is always named `Y`.
Potential grouping factors for random-effects terms are named `G`, `H`, etc.

### Models with simple, scalar random effects

The formula language in *Julia* is similar to that in *R* except that the formula must be enclosed in a call to the `@formula` macro.
A basic model with simple, scalar random effects for the levels of `G` (the batch of an intermediate product, in this case) is declared and fit as
```{julia;term=true}
fm1 = fit!(lmm(@formula(Y ~ 1 + (1|G)), dat[:Dyestuff]))
```

(If you are new to Julia you may find that this first fit takes an unexpectedly long time, due to Just-In-Time (JIT) compilation of the code.
The second and subsequent calls to such functions are much faster.)

```{julia;term=true}
@time fit!(lmm(@formula(Y ~ 1 + (1|G)), dat[:Dyestuff2]))
```

### Models with vector-valued random effects

The *sleepstudy* data are observations of reaction time, `Y`, on several subjects, `G`, after 0 to 9 days of sleep deprivation.
A model with random intercepts and, possibly correlated, random slopes for each subject is fit as
```{julia;term=true}
fm2 = fit!(lmm(@formula(Y ~ 1 + U + (1+U|G)), dat[:sleepstudy]))
```

A model with uncorrelated random effects for the intercept and slope by subject is fit as
```{julia;term=true}
fm3 = fit!(lmm(@formula(Y ~ 1 + U + (1|G) + (0+U|G)), dat[:sleepstudy]))
```

Although technically there are two random-effects *terms* in the formula for *fm3* both have the same grouping factor
and, internally, are amalgamated into a single vector-valued term.

### Models with multiple, scalar random-effects terms

A model for the *Penicillin* data incorporates random effects for the plate, `G`, and for the sample, `H`.
As every sample is used on every plate these two factors are *crossed*.
```{julia;term=true}
fm4 = fit!(lmm(@formula(Y ~ 1 + (1|G) + (1|H)), dat[:Penicillin]))
```

In contrast the sample, `G`, grouping factor is *nested* within the batch, `H`, grouping factor in the *Pastes* data.
That is, each level of `G` occurs in conjunction with only one level of `H`.
```{julia;term=true}
fm5 = fit!(lmm(@formula(Y ~ 1 + (1|G) + (1|H)), dat[:Pastes]))
```

In observational studies it is common to encounter *partially crossed* grouping factors.
For example, the *InstEval* data are course evaluations by students, `G`, of instructors, `H`.
Additional covariates include the academic department, `H`, in which the course was given and `A`, whether or not it was a service course.
```{julia;term=true}
fm6 = fit!(lmm(@formula(Y ~ 1 + A * I + (1|G) + (1|H)), dat[:InstEval]))
```

## Fitting generalized linear mixed models

To create a GLMM using
```@docs
glmm
```
the distribution family for the response, given the random effects, must be specified.

```{julia;term=true}
gm1 = fit!(glmm(@formula(r2 ~ 1 + a + g + b + s + m + (1|id) + (1|item)), dat[:VerbAgg],
    Bernoulli()))
```

The canonical link is used if no link is specified.
